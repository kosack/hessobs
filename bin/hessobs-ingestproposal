#!/usr/bin/env python
"""
Script to read a HESS Proposals Detail Form (>version 6), verify it,
and insert the proposal into the database

Author: Karl Kosack
"""
from __future__ import print_function

import os
import re
import sys
from optparse import OptionParser

import configobj  # for parsing the details form
import dateutil.parser
from hessobs import propdb
from numpy import asarray
from validate import ValidateError, Validator

EMAIL_RE = re.compile("[\w.-]+@[\w-]+(?:\.\w+)")


def email_check(value):
    """ filter used later to validate email addresses """
    if isinstance(value, list):
        raise ValidateError("A list was passed, expected email")
    if EMAIL_RE.match(value) is None:
        raise ValidateError('"%s" is not an email address' % value)
    return value


def translate_subarray(subarray):
    """ return correct subarray name given short one """
    subarray_map = {"CT5": "CT5 Mono", "CT1-4": "CT1-4 Stereo", "CT1-5": "CT1-5 Hybrid"}

    return subarray_map[subarray]


def translate_fields(fields):
    """translate field names into database column names"""

    translated = dict()

    for key, value in fields.items():

        column = key.replace("-", "_")

        if key == "RA":
            column = "RA_2000"
            if (int(value) < 0):
                value = -1
            else:
                value = float(value) * 12.0 / 180.0  # change to hours

        elif key == "Dec":
            column = "Dec_2000"

        elif key == "Special-Requests":
            value = value.strip()

        elif key == "Comments":
            value = value.strip()

        elif key == "Authors":
            auths = value.split(",")
            value = ", ".join([auth.strip() for auth in auths])

        elif key == "Keywords":
            if type(value) == list:
                value = ", ".join(value)

        elif key == "Start-Date" or key == "End-Date":
            if len(value) > 0 and value != "any":
                # reformat to YYYY-MM-DD
                value = dateutil.parser.parse(value).strftime("%Y-%m-%d")
            else:
                value = None

        elif key == "Type":
            column = "Target_Type"

        # elif key == 'CT5-Required':
        #     column = "Subarray_worst"
        #     if value.lower().strip() == 'yes':
        #         value = "CT5 Mono"
        #     else:
        #         value = "CT1-4 Stereo"

        elif key == "Working-Group" or key == "Working-Group2":
            wgname = {'AP': 'Astrophysics Departement',
                      'OP': 'Operations Departement',
                      'IT': 'IT Departement'}
            if (value != ''):
                value = wgname[value]

            if key == "Working-Group2":
                column = "Working_Group_Secondary"

        elif key == "Subarray" or key == "Subarrays-alt":
            continue

        elif "Sky_Brightness" in key:
            brightness_map = {'dark': 'Dark',
                              'gray': 'Gray',
                              'bright': 'Bright'}
            if (value != ''):
                value = brightness_map[value]

            if key == "Sky_Brightness_1":
                column = 'Sky_Brightness_1'

            if key == "Sky_Brightness_2":
                column = "Sky_Brightness_2"

            if key == "Sky_Brightness_3":
                column = "Sky_Brightness_3"

        translated[column] = str(value)

        # handle subarrays, which are a more complicated case:
        if 'Subarray_Requested_' in fields:
            translated['Subarray_Requested_1'] = translate_subarray(fields[
                                                                    'Subarray_Requested_1'])
            if "Subarray_Requested_2" in fields:
                translated['Subarray_Requested_2'] = translate_subarray(fields[
                                                                        'Subarray_Requested_2'])
            if "Subarray_Requested_3" in fields:
                translated['Subarray_Requested_3'] = translate_subarray(fields[
                                                                        'Subarray_Requested_3'])
        '''
        This is outdated outdated
        if fields['Subarrays-alt'] != '':
            sub_alts = asarray([fields['Subarrays-alt'], ]).flatten()
            for ii, sub in enumerate(sub_alts):
                sub = translate_subarray(sub.strip())
                translated['Subarray_Requested_{}'.format(ii + 2)] = translate_subarray(sub)
        '''

    return translated


def upload_pdf(filename, year, seqno, revision):
    """Rename input file to year-seqno-revision.pdf and upload it to the
    HESS webserver.

    Parameters
    ----------
    filename: string
        filename of original file
    year: int
        year of proposal
    seqno: int
        sequence number of proposal
    revision: int
        revision of proposal

    """

    newfilename = "{year}/{year}-{seqno:03d}-{revision}.pdf".format(
        year=int(year), seqno=int(seqno), revision=int(revision)
    )

    command = (
        'cat {0} | ssh lfs1 "ssh iwww-hfm '
        '\\"cd /home/wwwdoc/html/HESS/intern/Proposals;'
        ' cat > {1}\\""'
    ).format(filename, newfilename)

    # remote ="iwww-hfm:/home/wwwdoc/html/HESS/intern/Proposals"
    # command= "scp {0} {1}/{2}".format(filename, remote, newfilename)

    print("EXECUTING: '", command, "'")
    # This is not correctly setup for me currently. So no execution of the command for now.
    # os.system(command)


def validate(config):
    """ check that the inputs are correct """

    # hack to deal with when keywords is blank (string_list seems to
    # require at least one value)
    if "Keywords" in config:
        if config["Keywords"] == "":
            del config["Keywords"]

    validator = Validator({"email": email_check})
    result = config.validate(validator, preserve_errors=True)

    if result is not True:
        for (sections, key, reason) in configobj.flatten_errors(config, result):
            if key is not None:
                print(
                    (
                        'The "{0}" key in the section "{1}" '
                        + "failed validation:\n\t-> {2}"
                    ).format(key, ", ".join(sections), reason)
                )
            else:
                print("The following section was missing:%s " % ", ".join(sections))

    return result


if __name__ == "__main__":

    usage = (
        "%prog <submission-date> <year> <seqno> <revision> "
        "<prop-details-file> <pdf-file>"
    )
    description = (
        "Read a proposal details form and "
        "insert it into the Proposals database."
        " By default only print out the parsed info, "
        "and only modify the database if --write is specified"
    )
    optparser = OptionParser(usage=usage, description=description)

    optparser.add_option(
        "-w", "--write", action="store_true", dest="write", help="write to the database"
    )

    optparser.add_option(
        "-u", "--upload", action="store_true", dest="upload", help="just upload file"
    )

    try:
        opts, args = optparser.parse_args()
        subdate, year, seqno, revision, propfile, pdffile = args
        print(opts)
    except ValueError as err:
        optparser.print_help()
        sys.exit(1)

    if opts.write:
        propdb.WRITE = True

    obsspecfile = "configspecs/proposal.configspec"
    targspecfile = "configspecs/targets.configspec"

    print("ID  :", year, seqno, revision)
    print("TECH:", propfile)
    print("PROP:", pdffile)

    targs = configobj.ConfigObj(propfile, configspec=targspecfile)
    prop = configobj.ConfigObj(targs.pop("Proposal"), configspec=obsspecfile)

    prop["Submission-Date"] = subdate

    print("VALIDATION OF", propfile)

    if validate(prop) is not True or validate(targs) is not True:
        print("\tValidation failed. Check input files")
        sys.exit(1)
    else:
        print("\tValidated!")

    # # obs strategy goes in the target, not the proposal (so have to
    # # move it)
    # strategy = prop['Observation-Strategy']
    # del prop['Observation-Strategy']
    # for targ in targs:
    #     targs[targ]['Observation-Strategy'] = strategy

    print("=" * 70)
    print(" DATABASE INSERT")
    if not opts.write:
        print(" (SIMULATION ONLY) ")
    print("=" * 70)

    session = propdb.session()

    try:

        if opts.write:
            propdb.check_if_exists(session, year, seqno, revision)

        print("------------------------------")
        print(" PROPOSAL ")
        print("------------------------------")

        setnum = propdb.add_proposal_to_db(
            session, translate_fields(prop), year, seqno, revision
        )

        print("\t--> SetNum=", setnum)

        for targ in targs:
            print("------------------------------")
            print("", targ)
            print("------------------------------")
            propdb.add_target_to_db(
                session, targ, translate_fields(targs[targ]), setnum
            )
        session.commit()
    except Exception as ex:
        print("!" * 70)
        print("Caught Exception:'", ex, "'.  Rolling Back Database Transaction...")
        session.rollback()
        print("!" * 70)
        raise ex
    finally:
        print("Closing Session")
        session.close()

    # Now upload the PDF:

    if opts.write or opts.upload:
        upload_pdf(pdffile, year, seqno, revision)
        os.system("python verify.py {0}-{1}-{2}".format(year, seqno, revision))
